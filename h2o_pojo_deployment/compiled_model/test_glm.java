/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-10-11T20:47:20.690+11:00
  3.10.0.6
  
  Standalone prediction code with sample test data for GLMModel named test_glm

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/test_glm > test_glm.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m test_glm.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="test_glm", algorithm="glm")
public class test_glm extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 4; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_test_glm.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* Sepal.Length */ null,
    /* Sepal.Width */ null,
    /* Petal.Length */ null,
    /* Petal.Width */ null,
    /* Species */ test_glm_ColInfo_4.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.3333333333333333,0.3333333333333333,0.3333333333333333};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public test_glm() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(2177516332111455334L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    final double [] b = BETA.VALUES;
    for(int i = 0; i < 0; ++i) if(Double.isNaN(data[i])) data[i] = CAT_MODES.VALUES[i];
    for(int i = 0; i < 4; ++i) if(Double.isNaN(data[i + 0])) data[i+0] = NUM_MEANS.VALUES[i];
    preds[0] = 0;
    for(int c = 0; c < 3; ++c){
      preds[c+1] = 0;
      for(int i = 0; i < 4; ++i)
        preds[c+1] += b[0+i + c*5]*data[i];
      preds[c+1] += b[4 + c*5]; // reduce intercept
    }
    double max_row = 0;
    for(int c = 1; c < preds.length; ++c) if(preds[c] > max_row) max_row = preds[c];
    double sum_exp = 0;
    for(int c = 1; c < preds.length; ++c) { sum_exp += (preds[c] = Math.exp(preds[c]-max_row));}
    sum_exp = 1/sum_exp;
    double max_p = 0;
    for(int c = 1; c < preds.length; ++c) if((preds[c] *= sum_exp) > max_p){ max_p = preds[c]; preds[0] = c-1;};
    return preds;
  }
    public static class BETA implements java.io.Serializable {
      public static final double[] VALUES = new double[15];
      static {
        BETA_0.fill(VALUES);
      }
      static final class BETA_0 implements java.io.Serializable {
        static final void fill(double[] sa) {
          sa[0] = -1.6808678455768111;
          sa[1] = 2.946079658179748;
          sa[2] = -1.9950507208343495;
          sa[3] = -4.198964199766134;
          sa[4] = 9.071134805241288;
          sa[5] = 0.8172552367427764;
          sa[6] = -1.6008783931044217;
          sa[7] = -0.4989312238921316;
          sa[8] = -1.1509706691007906;
          sa[9] = 2.9989329777415383;
          sa[10] = -0.17844068848976818;
          sa[11] = -4.403912924232056;
          sa[12] = 3.3507703627739174;
          sa[13] = 7.3471211713287685;
          sa[14] = -15.754511651782984;
        }
      }
}
// Imputed numeric values
    static class NUM_MEANS implements java.io.Serializable {
      public static final double[] VALUES = new double[4];
      static {
        NUM_MEANS_0.fill(VALUES);
      }
      static final class NUM_MEANS_0 implements java.io.Serializable {
        static final void fill(double[] sa) {
          sa[0] = 5.843333333333334;
          sa[1] = 3.0573333333333315;
          sa[2] = 3.7580000000000005;
          sa[3] = 1.1993333333333336;
        }
      }
}
// Imputed categorical values.
    static class CAT_MODES implements java.io.Serializable {
      public static final int[] VALUES = new int[0];
      static {
      }
}
    // Categorical Offsets
    public static final int[] CATOFFS = {0};
}
// The class representing training column names
class NamesHolder_test_glm implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    NamesHolder_test_glm_0.fill(VALUES);
  }
  static final class NamesHolder_test_glm_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Sepal.Length";
      sa[1] = "Sepal.Width";
      sa[2] = "Petal.Length";
      sa[3] = "Petal.Width";
    }
  }
}
// The class representing column Species
class test_glm_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    test_glm_ColInfo_4_0.fill(VALUES);
  }
  static final class test_glm_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "setosa";
      sa[1] = "versicolor";
      sa[2] = "virginica";
    }
  }
}


